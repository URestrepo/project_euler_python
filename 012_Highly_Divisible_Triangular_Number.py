"""
Highly divisible triangular number
Problem 12 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

This can be solved using a closed form solution,
the number of factors of a number is 
the product of each (exponent + 1 of each prime factor )

example 120 has prime factors (2^3,3^1,5^1)
so, the quantity of factors if 
(3+1)(1+1)(1+1)
"""
from math_library import prime_factorize, product
from collections import Counter
from operator import itemgetter

def triangle(n):
    return (n*(n+1))/2

def num_factors(factors):
    count_primes = Counter(factors)
    count_facs = [ s+1 for s in count_primes.values() ]
    return product(count_facs)
    # sorted_count_facs = sorted(count_facs, key=itemgetter(1), reverse=True)
    # return sorted_count_facs[0]

def num_tri_divisors(n):
    count_factors = 0
    pos = 2
    tri_num = 0
    while count_factors < n:
        tri_num = triangle(pos)
        p_factors = prime_factorize(tri_num)
        count_factors = num_factors(p_factors)
        pos += 1
    return tri_num

if __name__ == "__main__":
    print summation(num_divisors(500))