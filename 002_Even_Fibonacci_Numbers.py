"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.


"""

"""
I was not able to explicitly create a list comprehension; however, C told to look into python 
generators, something that allows one to use something similar to 
lazy evaluation in Haskell

"""

def fib_generator(n):
    fib_first = 0
    fib_second = 1
    while fib_first < n:
        yield fib_first
        fib_first, fib_second = fib_second, fib_first + fib_second

k = [x for x in fib_generator(4000000)]
k_even = list(filter(lambda x : x % 2 == 0, k))
print(sum(k_even))